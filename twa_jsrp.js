// Generated by CoffeeScript 1.7.1

/*
  @TODO figure out seemsless loop for base point in gradient
    currently only the end point is accounted for
 */

(function() {
  var Jsrp_svg, format_jsrp, log, pulse_speed, retrieve_all_pulse_objects;

  pulse_speed = 50;


  /*
   INIT
   parses dom, and formats array of objects
   cycles through objects applying pulse effect
   */

  document.addEventListener("DOMContentLoaded", function() {
    var jsrp_objects;
    jsrp_objects = retrieve_all_pulse_objects();
    setInterval((function() {
      var jsrp_obj, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = jsrp_objects.length; _i < _len; _i++) {
        jsrp_obj = jsrp_objects[_i];
        _results.push(jsrp_obj.advance_color(void 0));
      }
      return _results;
    }), pulse_speed);
  });


  /*
   Retrieve and format all dom elements with .jsrp into jsrp_obj_array
   @RETURN an array of formatted object for specific tag types
   */

  retrieve_all_pulse_objects = function() {
    var all_jsrp, jsrp_dom, _i, _len, _results;
    all_jsrp = document.querySelectorAll(".jsrp");
    _results = [];
    for (_i = 0, _len = all_jsrp.length; _i < _len; _i++) {
      jsrp_dom = all_jsrp[_i];
      _results.push(format_jsrp(jsrp_dom));
    }
    return _results;
  };


  /*
   preps a dom object for object creation and passes to class/constructor
   @param {DOM object} _jsrp_dom
   @RETURN a formatted jsrp type object
   */

  format_jsrp = function(_jsrp_dom) {
    var parent_node, parent_tag;
    parent_tag = _jsrp_dom.parentNode.tagName;
    parent_node = _jsrp_dom.parentNode;
    if (parent_tag === "g") {
      parent_node = _jsrp_dom.parentNode.parentNode;
    }
    if (parent_node.tagName === "svg") {
      return new Jsrp_svg(_jsrp_dom, parent_node);
    } else {

    }
  };


  /*
   class structure for jsrp object for an SVG element
   @method constructor - initialized object and gets relevent information
   @method parse_color - parses colors into local params
    @param {String} raw_color - attr from dom formatted as "h1,h2 s1,s2 b1,b2"
   @mathod advance_color - increments the color within its range
   @method hsb_split - splits an array of format ["h1,h2", "s1,s2", "b1,b2"]
    into and array with format hx,sx,bx
    @param {Array} _color_data - format ["h1,h2", "s1,s2", "b1,b2"]
    @param {int} _key -  index for sub array (x)
   */

  Jsrp_svg = (function() {
    function Jsrp_svg(jsrp_dom, parent_node) {
      this.jsrp_dom = jsrp_dom;
      this.parent_node = parent_node;
      this.parse_color(this.jsrp_dom.getAttribute("data-jsrp"));
    }

    Jsrp_svg.prototype.parse_color = function(raw_color) {
      var color_data;
      color_data = raw_color.split(" ");
      this.base_hsb = this.hsb_split(color_data, 0);
      this.max_hsb = this.hsb_split(color_data, 1);
      this.current_hsb = this.hsb_split(color_data, 0);
    };

    Jsrp_svg.prototype.advance_color = function() {
      var _i;
      _i = 0;
      while (_i < this.base_hsb.length) {
        if (this.current_hsb[_i] < this.max_hsb[_i]) {
          this.current_hsb[_i]++;
        } else {
          this.current_hsb[_i] = parseInt(this.base_hsb[_i]);
        }
        _i++;
      }
      log(this.current_hsb);
    };

    Jsrp_svg.prototype.hsb_split = function(_color_data, _key) {
      var hsb, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = _color_data.length; _i < _len; _i++) {
        hsb = _color_data[_i];
        _results.push(hsb.split(",")[_key]);
      }
      return _results;
    };

    return Jsrp_svg;

  })();


  /*
  ////////////////////////////////////
  /// @DEV @ONLY @METHODS ////////////
  ////////////////////////////////////
   */


  /*
   Shorthand log to console
   @param {String} _statement - string to log
   */

  log = function(_statement) {
    return console.log(_statement);
  };

}).call(this);
