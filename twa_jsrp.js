// Generated by CoffeeScript 1.7.1
(function() {
  var Jsrp_svg, format_jsrp, log, parse_jsrp_attr, pulse_speed, retrieve_all_pulse_objects, total_active_gradients;

  pulse_speed = 10;


  /*
   INIT
   parses dom, and formats array of objects
   cycles through objects applying pulse effect
    *
   @since v0.1
   */

  document.addEventListener("DOMContentLoaded", function() {
    var jsrp_objects;
    jsrp_objects = retrieve_all_pulse_objects();
    setInterval((function() {
      var jsrp_obj, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = jsrp_objects.length; _i < _len; _i++) {
        jsrp_obj = jsrp_objects[_i];
        _results.push(jsrp_obj.advance_color(void 0));
      }
      return _results;
    }), pulse_speed);
  });


  /*
   Retrieve and format all dom elements with .jsrp into jsrp_obj_array
    *
   @RETURN an array of formatted object for specific tag types
    *
   @since v0.1
   */

  retrieve_all_pulse_objects = function() {
    var all_jsrp, jsrp_dom, _i, _len, _results;
    all_jsrp = document.querySelectorAll(".jsrp");
    _results = [];
    for (_i = 0, _len = all_jsrp.length; _i < _len; _i++) {
      jsrp_dom = all_jsrp[_i];
      _results.push(format_jsrp(jsrp_dom));
    }
    return _results;
  };


  /*
   preps a dom object for object creation and passes to class/constructor
    *
   @param {DOM object} _jsrp_dom
   @RETURN a formatted jsrp type object
    *
   @since v0.1
   */

  format_jsrp = function(_jsrp_dom) {
    var parent_node, parent_tag;
    parent_tag = _jsrp_dom.parentNode.tagName;
    parent_node = _jsrp_dom.parentNode;
    if (parent_tag === "g") {
      parent_node = _jsrp_dom.parentNode.parentNode;
    }
    if (parent_node.tagName === "svg") {
      return new Jsrp_svg(_jsrp_dom, parent_node);
    } else {

    }
  };


  /*
    Parses the values from the DOM Attr and returns them as
    an appropriately formatted array. This is done by retrieving
    the core hsl values as well as the speed in seconds @TODO stroke/fill
     *
    @param {String} _dom_string - string retrieved by the dom
    @RETURN {array} - an array of mixed types and values
      @val {array} _h - hue movement range
      @val {int} _s - satruation percent as int
      @val {int} _l - lightness percent as int
      @val {int} _speed - speed for each step of the cycles
     *
    @since v0.1
   */

  parse_jsrp_attr = function(_dom_string) {
    var _h, _i, _l, _s, _split_dom, _steps;
    _split_dom = _dom_string.split(" ");
    _i = 0;
    while (_i < _split_dom.length) {
      switch (_split_dom[_i].charAt(0)) {
        case "H":
          _h = _split_dom[_i].substring(2, _split_dom[_i].length);
          break;
        case "S":
          _s = parseInt(_split_dom[_i].substring(2, _split_dom[_i].length - 1));
          break;
        case "L":
          _l = parseInt(_split_dom[_i].substring(2, _split_dom[_i].length - 1));
      }
      if (_split_dom[_i].charAt(_split_dom[_i].length - 1) === "s") {
        _steps = _split_dom[_i].substring(0, _split_dom[_i].length - 1);
        _steps = parseInt((parseFloat(_steps)) * 1000 / 360);
      }
      _i++;
    }
    _h = _h.split("->");
    return [_h, _s, _l, _steps];
  };

  total_active_gradients = 0;


  /*
    Jsrp_svg
    Object for JSRP made for an svg child node
    Controls parse of information and aniamtion of pulse
     *
    @jsrp_dom
    @parent_node  - svg parent container
    @dom_id       - id of gradient element in dom
     *
    @since v0.1
   */

  Jsrp_svg = (function() {

    /*
      initialized object and gets relevent information
      @param {DOM object} jsrp_dom - @see parent
      @param {DOM object} parent_node - @see parent
     */
    function Jsrp_svg(jsrp_dom, parent_node) {
      this.jsrp_dom = jsrp_dom;
      this.parent_node = parent_node;
      total_active_gradients++;
      this.parse_jsrp_params(this.jsrp_dom.getAttribute("data-jsrp"));
      this.format_gradient_def();
    }


    /*
      parses parameters for jsrp object
      or sets default values
       *
      @param {String} raw_jsrp_data - raw data input from string value
     */

    Jsrp_svg.prototype.parse_jsrp_params = function(raw_jsrp_data) {
      var color_data;
      color_data = parse_jsrp_attr(raw_jsrp_data);
      this.stops = color_data[0];
      this.s = color_data[1];
      this.l = color_data[2];
      this.steps = color_data[3];
      this.base_color = this.stops[0];
    };


    /*
      increments the cbase color value
     */

    Jsrp_svg.prototype.advance_color = function() {
      this.base_color--;
      this.set_updated_gradient();
    };


    /*
      Formats and inserts the radial gradeint elemtnt into the dom
     */

    Jsrp_svg.prototype.format_gradient_def = function() {
      var _cx, _cy, _defs, _fillID;
      this.dom_id = "jsrp_grad_" + total_active_gradients;
      _fillID = "url(#jsrp_grad_" + total_active_gradients + ")";
      _cx = this.jsrp_dom.getBoundingClientRect().width / 2;
      _cy = this.jsrp_dom.getBoundingClientRect().height / 2;
      log(_cx);
      _defs = this.parent_node.getElementsByTagName("defs")[0];
      _defs.innerHTML = _defs.innerHTML + ("<radialGradient id=\"jsrp_grad_" + total_active_gradients + "\" cx=\"" + _cx + "\" cy=\"" + _cy + "\" r=\"" + _cx + "\" gradientUnits=\"userSpaceOnUse\">\n</radialGradient>");
      this.jsrp_dom.setAttribute("fill", _fillID);
      return this.set_gradient_steps();
    };


    /*
    * Sets up the initial stops for the radial gradients
    * Fixes steps range for pulsing
     */

    Jsrp_svg.prototype.set_gradient_steps = function() {
      var _gradient_steps, _inc, _on_step;
      this.steps = this.steps - 1;
      _gradient_steps = "";
      _inc = 0;
      while (_inc < this.steps + 1) {
        _on_step = _inc * (1 / this.steps);
        _gradient_steps += "<stop offset=\"" + (Math.floor(_on_step * 100)) + "%\" style=\"\"/>";
        _inc++;
      }
      this.parent_node.getElementById(this.dom_id).innerHTML = _gradient_steps;
    };


    /*
      * Updates the hsb values for radial gradient stops
      * adds range variation to base color for each step/stop node
     */

    Jsrp_svg.prototype.set_updated_gradient = function() {
      var node, stop_nodes, _i, _inc, _len;
      stop_nodes = this.parent_node.getElementById(this.dom_id).querySelectorAll("stop");
      this.range_stops = (this.stops[1] - this.stops[0]) / this.steps;
      _inc = 0;
      for (_i = 0, _len = stop_nodes.length; _i < _len; _i++) {
        node = stop_nodes[_i];
        this.pulse(node, _inc);
        _inc++;
      }
    };


    /*
    * Performs the actual calculatioon of step values
    * and their attachment to htm/svg node
    * @param {DOM element} node - <stop> node
    * @param {int} _in - node item to mofidy in order
     */

    Jsrp_svg.prototype.pulse = function(node, _inc) {
      var _color, _new_color;
      _color = this.base_color + this.range_stops * _inc;
      _new_color = "stop-color:hsl(" + _color + "," + this.s + "%," + this.l + "%);";
      return node.setAttribute("style", _new_color);
    };

    return Jsrp_svg;

  })();


  /*
  ////////////////////////////////////
  /// @DEV @ONLY @METHODS ////////////
  ////////////////////////////////////
   */


  /*
   Shorthand log to console
   @param {String} _statement - string to log
   */

  log = function(_statement) {
    return console.log(_statement);
  };

}).call(this);
